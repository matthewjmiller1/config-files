# shellcheck shell=bash
# vim: syntax=sh
# vim: filetype=sh

# Matt Miller's .bashrc

### Begin built-in setup ###

# Creation mode (umask -S):
# u=rwx,g=rx,o=rx
umask 022

# Use +o to unset options
# Explicitly require redirect to overwrite existing file.
set -o noclobber
# Do not logoff/close terminal on EOF
set -o ignoreeof

# Disable core dumps (use "-c unlimited" to enable)
# Set as a soft limit (-S) so it can be increased later as needed.
ulimit -S -c 0
# To add PIDs to core name:
# sudo sh -c 'sysctl -w kernel.core_uses_pid=1 >> /etc/sysctl.d/core.conf'
# cat /proc/sys/kernel/core_uses_pid

# Use -u to unset shopt's
# Enable aliases for non-interactive shells
shopt -s expand_aliases
# Append current history to $HISTFILE rather than overwriting
shopt -s histappend

# If the direxpand option exists in this version of bash, then enable it.
# This will expand directory paths in environment variables on tab completion
# (e.g., "ls $HOME" will expand to the home directory path on tab completion).
__SHOPT_ERR=$(shopt -q direxpand 2>&1 > /dev/null)
if [ -z "$__SHOPT_ERR" ]; then
    shopt -s direxpand
fi
unset __SHOPT_ERR

# Clear existing aliases
unalias -a

### End built-in setup ###

### Begin PATH setup ###

# Start with a clean path
PATH=$(getconf PATH)
export PATH

# Do any environment-specific PATH setup
PATH_FILE="$HOME/.bashrc_path"
if test -f "$PATH_FILE"; then
    # shellcheck disable=SC1090
    . "$PATH_FILE"
fi

export PATH=$PATH:.

### End PATH setup ###

# Enable bash completion, if available.
# Check if BASH_COMPLETION_COMPAT_DIR is read-only by attempting to unset it in
# a subshell and checking the return code (non-zero means it could be unset and,
# hence, is not read-only).
if (unset BASH_COMPLETION_COMPAT_DIR 2> /dev/null); then
    __BASH_COMPLETION_D="/usr/local/etc/bash_completion.d"
    __BASH_COMPLETION_SH="/usr/local/etc/profile.d/bash_completion.sh"

    if [[ -r "$__BASH_COMPLETION_D" ]]; then
        export BASH_COMPLETION_COMPAT_DIR="$__BASH_COMPLETION_D"
    fi

    # shellcheck disable=SC1090
    # shellcheck disable=SC1091
    [[ -r "$__BASH_COMPLETION_SH" ]] && . "$__BASH_COMPLETION_SH"

    unset __BASH_COMPLETION_D __BASH_COMPLETION_SH
fi

### Begin environment variables ###

# Write each comand to $HISTFILE instead of waiting until exit
export PROMPT_COMMAND="history -a;$PROMPT_COMMAND"
# $HISTFILE limit
export HISTFILESIZE=1000000
# In-memory history limit
export HISTSIZE=1000000
# Ignore duplicate commands, those beginning with a space,
# and the exit command.
export HISTIGNORE="&:[ ]*:exit"

export EDITOR=vim
export VISUAL=$EDITOR
# Make the prompt show the hostname
export PS1="\h$ "

if [[ "$OSTYPE" == "darwin"* ]]; then
    # Make ls show colors
    export CLICOLOR=1
    if command -v gls &> /dev/null; then
        eval "$(gdircolors)"
        alias ls="gls --color=auto"
    fi
fi

if [[ "$OSTYPE" == "freebsd"* ]]; then
    # Make ls show colors
    alias ls="ls -G"

    # This TERM gives the Linux behavior where closing vim goes back to the
    # console contents instead of keeping the file contents on the terminal.
    export TERM=rxvt-unicode-256color
fi

### End environment variables ###

### Begin Python venv setup  ###

#if test -d "$PYVENV_PATH"; then
if command -v python &> /dev/null; then
    # Disable the venv addition to the bash prompt
    export VIRTUAL_ENV_DISABLE_PROMPT=1

    PYVENV_PATH="$HOME/.local/pyvenvs"
    PYVENV_DEFAULT="main"

    function pyvenv { 
        # shellcheck disable=SC1090
        source "$PYVENV_PATH/${1}/bin/activate";
    };

    function pyvenv_upgrade { 
        VENV=""
        if [[ "$VIRTUAL_ENV" != "" ]]; then
            VENV=$(basename "$VIRTUAL_ENV")
            deactivate
        fi
        python -m venv --upgrade --upgrade-deps "$PYVENV_PATH/${1}"
        if [ -n "$VENV" ]; then
            pyvenv "$VENV"
        fi
    };

    # Set the default venv
    if test -e "$PYVENV_PATH/$PYVENV_DEFAULT"; then
        pyvenv "$PYVENV_DEFAULT"
    fi
fi

### End Python venv setup  ###

### Begin aliases ###

# Force interactive prompt before overwriting/removing a file
alias cp='cp -i'
alias rm='rm -i'
alias mv='mv -i'

# ls aliases
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    alias ls='ls --color=auto'
fi
alias ll='ls -l'
alias llh='ls -lh'
alias lls='ls -lhS'

# Command shortcuts

if command -v vim &> /dev/null; then
    alias vi='vim'
fi

if command -v black &> /dev/null; then
    alias black='black --line-length=80'
fi

if command -v tshark &> /dev/null; then
    alias ts_fields="tshark -E header=y -T fields -e frame.number -e frame.time_relative -e ip.src -e ip.dst -e tcp.srcport -e tcp.dstport -e tcp.seq -e tcp.ack -e tcp.len -e tcp.nxtseq -e tcp.window_size -e tcp.flags "
fi

# If kubectl exists, set up aliases and auto-completion
if command -v kubectl &> /dev/null; then
    alias k="kubectl"
    # Enable kubectl auto-completion, if kubectl exists
    # shellcheck disable=SC1090
    source <(kubectl completion bash)
    # Allow kubectl auto-complete to work with the alias
    complete -F __start_kubectl k
fi

if command -v helm &> /dev/null; then
    alias h="helm"
fi

if command -v gcloud &> /dev/null; then
    alias gc="gcloud"
fi

if command -v minikube &> /dev/null; then
    alias mk="minikube"
fi

alias vncstart="vncserver -pn -depth 24 -alwaysshared \
    -geometry 1200x850 -localhost no"

alias sshpasswd="ssh-keygen -p"

# ls all the vnc processes active
alias vncls="ls ~/.vnc/*.pid | sed -n \
    's?.*/\.vnc/\([^:]*\):\([0-9]*\)\.pid?\nServer: \1\nDisplay: \2?p'"

alias myps='ps -u $(whoami) -o user,pid,stime,time,args'
alias pstree='ps U $(whoami) jfww'
alias pstree_all="ps axjfww"

# Find any non-ASCII characters in a file and highlight them
alias non_ascii='grep --color="auto" -r -P -n "[^\x00-\x7F]"'

# Find invalid UTF-8 characters in a file
alias bad_utf8="grep -axv '.*'"

# Aliases for GNU global tags
if command -v global &> /dev/null; then
    # Find global definitions
    alias gtd="global -x"
    # Find references to definiton (not symbol)
    alias gtr="global -rx"
    # Find instances of symbol (e.g., variables)
    alias gts="global -sx"
    # Find all string instances (i.e., grep codebase for string)
    alias gtg="global -gx"
    # Find path for file names
    alias gtf="global -P"
    # Find all objects with prefix
    alias gtc="global -c"
fi

# Ansible aliases
if command -v ansible &> /dev/null; then
    alias ans="ansible"
fi

if command -v ansible-playbook &> /dev/null; then
    alias ans_p="ansible-playbook"
fi

if command -v ansible-inventory &> /dev/null; then
    alias ans_i="ansible-inventory"
fi

# Docker aliases
if command -v docker &> /dev/null; then
    alias dk_rm_dangling='docker rmi $(docker images -f "dangling=true" -q)'
    alias dk_rm_exited='docker rm $(docker ps -a -f status=exited -q)'
    alias dk_rm_stopped='docker rm $(docker ps -a -f status=stopped -q)'
fi

if command -v strace &> /dev/null; then
    # -f = follow forks
    # -tt = absolute timestamps with usecs
    # -v = verbose mode
    alias strace2="strace -f -tt -v"
fi

### End aliases ###

### Begin functions ###

# To use xargs with a bash function:
# ls | grep "dir/" | xargs bash -c '<function> "$@"' _
# Use '-ic' for an interactive shell if using, e.g., functions defined in
# .bashrc or a startup file. Environment variables are inherited by the
# non-interactive shell invoked in that manner, but functions are not. Functions
# can be exported via "export -f <name>" or "typeset -xf <name>" in recent
# versions of bash.

# Kill a vnc session
function vnckill { 
    vncserver -kill :"${1}"; 
};

if command -v python &> /dev/null; then
    function js_lint { 
        python -m json.tool "${1}" /dev/null
    };

    function js_fmt { 
        local ORIG_FILE="${1}"
        local FMT_FILE="${1}.fmt"
        local TMP_FILE

        TMP_FILE=$(mktemp /tmp/js_fmt-XXXXX)

        if python -m json.tool "$ORIG_FILE" "$FMT_FILE";
        then
            /bin/cp "$ORIG_FILE" "$TMP_FILE"
            /bin/cp "$FMT_FILE" "$ORIG_FILE"
        fi
        /bin/rm "$FMT_FILE"
    };
fi

# To do ripgrep and exclude a directory:
# rg -g '!**/test/*' some_string foo/bar
# Will search for some_string in foo/bar, excluding any test/ subdirectories
# from the search.

# Use: findgrep path "*.h" my_string
# To find an object location in makefiles, use:
# findgrep "make*" "object_name\.o"
function findgrep { 
    local PRUNE_STR=""
    if [ -n "${4}" ]
    then
        PRUNE_STR="-path \"*/${4}/*\" -prune -o "
    fi
    CMD="find ${1} ${PRUNE_STR} \( -type f -or -type l \) -name \"${2}\""
    CMD="$CMD -follow -exec grep -H -n \"${3}\" '{}' \;"
    eval "$CMD"
};

# Iterate over multiple .pcap files to find with tshark
function findtshark { 
    # shellcheck disable=SC2044
    for i in $(find "${1}" \( -type f -or -type l \) -name "${2}" -follow);
    do
    echo "***** $i *****";
    tshark -n -t ad -r "$i" -Y "${3}"
    echo "**************";
    done; 
};

function subfind {
    find "${1}" -follow \( -type f -or -type d \);
};

function svndiff {
    local DIFF_FNAME="$HOME/tmp/r${1}.diff"
    svn diff -c "${1}" --diff-cmd diff -x "-p -C 5" >| "$DIFF_FNAME"
    echo "Diff is in $DIFF_FNAME"
};

# Combine two diff files into one that can be patched
function diff_combine {
    # Reset the index for getopts
    OPTIND=1
    function usage {
       echo ""
       echo "Combine two diff files into one"
       echo "Usage: diff_combine [-f] <diff file 1> <diff file 2>" \
            "<output diff file>"
       echo "   -f = force overwrite of existing file"
       echo ""
    }

    local do_overwrite=FALSE
    # Add extra opts to "hsm" string below
    while getopts fh  opt
    do
        case $opt in
            f) do_overwrite=TRUE;;
            h) usage 
               return 1;;
           \?) usage
               return 1;;
        esac
    done

    if [ "$OPTIND" -gt "$#" ]
    then
        usage
        return 1
    fi

    local shiftcount=$((OPTIND - 1))
    shift $shiftcount
    local diff_file1=$1
    local diff_file2=$2
    local out_diff_file=$3

    if [ -z "$diff_file1" ] || [ -z "$diff_file2" ] || [ -z "$out_diff_file" ]
    then
        usage
        return 1
    fi

    if [ "$do_overwrite" == FALSE ] && [ -e "$out_diff_file" ]
    then
        echo ""
        echo "Will not overwrite existing file $out_diff_file"
        echo "Use -f option to force overwrite"
        echo ""
    else
        cat "$diff_file1" >| "$out_diff_file" 2>&1;
        sed '1d' >> "$out_diff_file" 2>&1 "$diff_file2";
    fi
};

# Run a command and send an email when finished
function maildone {
    local DO_EMAIL=1;
    exec 3>&1 4>&2;
    (local CMD;
    local PWD;
    local RC_FILE;
    local TIME;
    local FILES;
    local STDOUT_FILE;
    local STDERR_FILE;
    local RC;
    local CMD=$*;
    PWD=$(pwd);
    RC_FILE="/tmp/$(whoami)-$RANDOM";
    TIME=$( { time $CMD 1>&3 2>&4; \
                    echo "${PIPESTATUS[0]}" > "$RC_FILE"; } 2>&1 );
    FILES=$(lsof -a -p $! -d0,1,2 -Fn 2> /dev/null | \
        sed -n 's/^n\(\S\+\).*/\1/p');
    STDOUT_FILE=$(echo "$FILES" | sed -n '2 p');
    STDERR_FILE=$(echo "$FILES" | sed -n '3 p');
    RC=$(cat "$RC_FILE");
    local RC_STR="SUCCESS";
    if [ "$RC" != 0 ]; then
        RC_STR="ERROR";
    fi
    local MSG
    MSG=$(printf \
        "\ncommand: \"%s\"\ndir: %s\nstdout: %s\nstderr: %s\nrc: %s(%s)\n%s\n" \
        "$CMD" "$PWD" "$STDOUT_FILE" "$STDERR_FILE" \
        "$RC_STR" "$RC" "$TIME");
    if [ "$DO_EMAIL" == 1 ]; then
        echo "$MSG" | mutt -s "Background Command Finished" \
            "$(whoami)"@netapp.com;
    else
        echo "$MSG";
    fi
    rm -f "$RC_FILE";
    ) &
    exec 3>&- 4>&-;
};

# Count all the lines in .pcap files that match an expression like:
#(ip.addr==10.225.217.116 && tcp.port==2337 && tcp.port==445)
function pcapcount { 
    # shellcheck disable=SC2044
    for i in $(find "${1}" \( -type f \) -name "${2}");
    do
        local TCOUNT
        TCOUNT=$(tshark -t ad -r "$i" -R "${3}" | wc -l)
        if [ "$TCOUNT" -gt 0 ]
        then
            echo "$i : $TCOUNT"
        fi
    done; 
};

# convert hex to decimal
function h2d {
    python -c "print(int('${1}', 16))"
};

# convert decimal to hex
function d2h {
    python -c "print(hex(${1}))"
};

# convert decimal to IP address
function d2i {
    python -c "import ipaddress; print(ipaddress.ip_address(${1}).__str__())"
};

# convert hex to IP address
function h2i {
    d2i "$(h2d "${1}")"
};

# convert IP address to decimal
function i2d {
    python -c "import ipaddress; print(int(ipaddress.ip_address(u'${1}')))"
};

# convert IP address to hex
function i2h {
    d2h "$(i2d "${1}")"
};

# add two hex numbers
function hexadd {
    local DECVAL1=${1}
    if [[ "${1}" == 0x* ]]
    then
        DECVAL1=$(h2d "${1}")
    fi
    local DECVAL2=${2}
    if [[ "${2}" == 0x* ]]
    then
        DECVAL2=$(h2d "${2}")
    fi
    d2h $((DECVAL1 + DECVAL2))
};

# subtract two hex numbers
function hexsub {
    local DECVAL1=${1}
    if [[ "${1}" == 0x* ]]
    then
        DECVAL1=$(h2d "${1}")
    fi
    local DECVAL2=${2}
    if [[ "${2}" == 0x* ]]
    then
        DECVAL2=$(h2d "${2}")
    fi
    d2h $((DECVAL1 - DECVAL2))
};

# add two decimal numbers
function decadd {
    local DECVAL1=${1}
    if [[ "${1}" == 0x* ]]
    then
        DECVAL1=$(h2d "${1}")
    fi
    local DECVAL2=${2}
    if [[ "${2}" == 0x* ]]
    then
        DECVAL2=$(h2d "${2}")
    fi
    echo $((DECVAL1 + DECVAL2))
};

# subtract two decimal numbers
function decsub {
    local DECVAL1=${1}
    if [[ "${1}" == 0x* ]]
    then
        DECVAL1=$(h2d "${1}")
    fi
    local DECVAL2=${2}
    if [[ "${2}" == 0x* ]]
    then
        DECVAL2=$(h2d "${2}")
    fi
    echo $((DECVAL1 - DECVAL2))
};

# add two IP addresses
function ipadd {
    local DECVAL1=${1}
    if [[ "${1}" == 0x* ]]
    then
        DECVAL1=$(h2d "${1}")
    elif [ "$(echo "${1}" | cut -d. --output-delimiter=' ' -f1- \
        | wc -w)" == 4 ]
    then
        DECVAL1=$(i2d "${1}")
    fi
    local DECVAL2=${2}
    if [[ "${2}" == 0x* ]]
    then
        DECVAL2=$(h2d "${2}")
    elif [ "$(echo "${2}" | cut -d. --output-delimiter=' ' -f1- \
        | wc -w)" == 4 ]
    then
        DECVAL2=$(i2d "${2}")
    fi
    d2i $((DECVAL1 + DECVAL2))
};

# Sort du output
function dusort {
    du -s "${1}" | sort -nr | cut -f2 | xargs du -hs;
};

# cat certain lines in a file
function catlines {
    if [ -z "${1}" ] || [ -z "${2}" ] || [ -z "${3}" ]
    then
        echo "Invalid parameters"
        return 1
    fi
    if [ "${2}" -gt "${3}" ]
    then
        echo "Invalid range ${2},${3}"
        return 1
    fi
    printf "\n**********\n"
    sed -n "${2},${3} p" "${1}";
    printf "**********\n\n"
};

### End functions ###

# Do any environment-specific setup
ENV_FILE="$HOME/.bashrc_env"
if test -f "$ENV_FILE"; then
    # shellcheck disable=SC1090
    . "$ENV_FILE"
fi
